(defun tokenize-line (delim line)
	(loop with l = (length delim)
				for n = 0 then (+ pos l)
				for pos = (search delim line :start2 n)
			if pos collect (subseq line n pos)
			else collect (subseq line n)
		while pos))

(defun triangulate (tokens out-stream)
	(write-line (concatenate 'string (nth 0 tokens) " " (nth 1 tokens) " " (nth 2 tokens) " " (nth 3 tokens) " ") out-stream)
	(write-line (concatenate 'string (nth 0 tokens) " " (nth 1 tokens) " " (nth 3 tokens) " " (nth 4 tokens) " ") out-stream))
	
(defun proc-line (str out-stream)
	(let ((tokens (tokenize-line " " str)))
		(if (string= (first tokens) "f")
			(if (eq 6 (list-length tokens))
				(triangulate tokens out-stream)
				(write-line str out-stream))
			(write-line str out-stream))))

(defun read-obj-file (filename)
	(with-open-file (in-stream filename :direction :input)
		(with-open-file (out-stream "C:/Users/Flawe/lisp/test.obj" :direction :output :if-exists :supersede :if-does-not-exist :create)
			(do ((line (read-line in-stream nil)
						(read-line in-stream nil)))
					((null line))
				(proc-line line out-stream)))))

(defun test-obj () (read-obj-file "C:/Users/Flawe/Game Dev/Models/cart.obj"))